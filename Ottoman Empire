12345678910111213141516171819202122232425262728
import motorimport motor_pairimport runloopfrom hub import motion_sensor, portimport utimeimport color_sensorimport hubimport sysprint("Battery Voltage:",hub.battery_voltage())print("Battery Current:",hub.battery_current())print("Battery Temp:",hub.battery_temperature())SOL_TEKER = port.ASAG_TEKER = port.BKALDIRAC = port.EDERIVATIVE = port.DRENK = port.Fclass Device:    def __init__(self, device_type, device_name, *args):        self.device_type = device_type        self.device_name = device_name        self.args = args    def __repr__(self):
import motor
import motor_pair
import runloop
from hub import motion_sensor, port
import utime
import color_sensor
import hub
import sys

print("Battery Voltage:",hub.battery_voltage())

until(function: Callable[[], bool], timeout: int = 0) -> Awaitable

Returns an awaitable that will return when the condition in the function or lambda passed is True or when it times out


import color_sensor
import color
from hub import port
import runloop

def is_color_red():
    return color_sensor.color(port.A) is color.RED

async def main():
    # Wait until Color Sensor sees red 
    await runloop.until(is_color_red)
    print("Red!")

runloop.run(main())
Parameters
function: Callable[[], bool]
A callable with no parameters that returns either True or False.
Callable is anything that can be called, so a def or a lambda

timeout: int
A timeout for the function in milliseconds.
If the callable does not return True within the timeout, the until still resolves after the timeout.
0 means no timeout, in that case it will not resolve until the callable returns True

